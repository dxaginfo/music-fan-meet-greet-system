version: '3.8'

services:
  # Frontend React application
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    depends_on:
      - server
    environment:
      - REACT_APP_API_URL=http://localhost:5000/api
    networks:
      - app-network
    restart: unless-stopped

  # Backend Node.js API
  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    depends_on:
      - postgres
      - redis
    environment:
      - NODE_ENV=production
      - PORT=5000
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/fanmeetgreet
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your_jwt_secret_key_here
      - JWT_EXPIRES_IN=7d
      - CLIENT_URL=http://localhost:3000
      - STRIPE_SECRET_KEY=your_stripe_secret_key
      - STRIPE_WEBHOOK_SECRET=your_stripe_webhook_secret
      - AWS_ACCESS_KEY_ID=your_aws_access_key
      - AWS_SECRET_ACCESS_KEY=your_aws_secret_key
      - AWS_REGION=us-east-1
      - AWS_S3_BUCKET=fanmeetgreet-media
    volumes:
      - ./server:/app
      - /app/node_modules
    networks:
      - app-network
    restart: unless-stopped

  # PostgreSQL database
  postgres:
    image: postgres:13-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=fanmeetgreet
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and session management
  redis:
    image: redis:6-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - app-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  app-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data: